<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jing Lin(林静) on Jing Lin‘s profile</title><link>http://linjing.io/authors/jing-lin%E6%9E%97%E9%9D%99/</link><description>Recent content in Jing Lin(林静) on Jing Lin‘s profile</description><generator>Source Themes academia (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Copyright &amp;copy; {year} linjing.io host on github, imesh.cloud host on netlify. CI/CD by github actions and netlify.Thanks bootcdn support for front libary CDN</copyright><lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://linjing.io/authors/jing-lin%E6%9E%97%E9%9D%99/index.xml" rel="self" type="application/rss+xml"/><item><title>Analysis and Thinking of Enterprise Open Source</title><link>http://linjing.io/post/analysis-and-thinking-of-enterprise-opensource/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>http://linjing.io/post/analysis-and-thinking-of-enterprise-opensource/</guid><description>&lt;blockquote>
&lt;p>近年来，开源软件对企业数字化转型的促进作用愈发明显。国家更是把建设和完善开源生态写入了“十四五规划”。与此同时，围绕开源治理、安全供应链等话题成为业界一大热点。作为开源用户或者作为开源主体，我们应该如何理解开源，如何理解社区，如何更好更安全的参与开源。本文将与您一起从开源的意义、商业模式、风险与挑战、选择与治理等几个方面进行探讨。&lt;/p>
&lt;/blockquote>
&lt;h3 id="开源对企业的意义">开源对企业的意义&lt;/h3>
&lt;p>让我们首先站在一个小我的角度思考开源与个体的意义，可以用一句话来概括“利己与利他”。使用开源项目或产品可以帮助个人快速解决工作中的问题与挑战，个人还可从开源项目或产品中获得创新思想与经验。这些都是利己。当个体不满足于只是作为开源的使用者，而开始参与到开源项目的贡献时，乃至自己设立开源项目时，就变成了利他，其他用户将从他的贡献或项目中获得收益。&lt;/p>
&lt;p>对企业来说也一样。当企业注重自身的数字化转型时，就意味着企业将会追求更加开放的组织精神。数字化转型的核心是利用数字技术和能力实现企业流程再造，进而驱动商业模式创新、提升企业竞争力，甚至改变一个行业，就像“滴滴“一样。这就要求企业的IT基础设施、技术不但要能支撑业务的快速变化与发展，更要能够驱动业务创新。企业要快速建立业务，快速迭代业务，快速获取业务反馈。因而具有可灵活支持短期与长期业务发展的IT架构与技术是关键，企业必须采用开放的可协作的新技术来持续改进和提升技术架构迭代能力。这些都意味着要足够“快”，要足够“创新”。开源技术恰好呼应了企业这样的需求，因为开源技术追求开放、协作、贡献的精神。企业采用开源技术，可以获得来自全世界优秀人才的贡献，更可以通过借助全世界人才的贡献来快速改进和提升企业的竞争实力。开源所造就的开放生态系统为所有相关方带来了这样的价值。&lt;/p>
&lt;p>以智能汽车行业为例。传统上，汽车生产企业需要依赖大量第三方供应商与技术。但当企业进入智能汽车新赛道后，车企需不断的创新车辆功能，提升用户体验，快速占领市场。如果车企依然采用传统供应商模式，将受制于那些封闭的供应商而无法创新产品，无法快速占领市场。通过采用开源技术，比如AGL（Automotive Grade Linux），可以无需再去开发车载的基本操作系统，而将宝贵的研发技术投入在更多的具有竞争性的创新上。&lt;/p>
&lt;p>具有开放性精神的企业，并不会仅仅止步于采用开源技术，更会贡献到开源中来。大型企业可以通过开源自身的产品或技术，帮助企业实现市场战略，占领市场或改变市场游戏规则，例如Google的安卓系统。而创新型小企业通过开源可以积累庞大的社区用户，增加影响力，扩大自身估值。&lt;/p>
&lt;p>可以看出开源对企业数字化转型的意义是显而易见的。一方面，开源有利于激发企业技术创新，相对于使用闭源软件，开源技术让使用者更具创造力和创新精神；另一方面，使用开源技术能够帮助企业节约成本，从而可以让更多的IT投资用于部署新技术，加快数字化转型。在一项针对全球IT领导者2020企业开源状况的调查中同样反映了这一结果，95%的受访者表示开源对他们的整体软件战略具有战略重要性。在国内，一些头部互联网企业也成立了专门的企业开源委员会来帮助企业实现更好的开源战略。国家更是把建设和完善开源生态写入了“十四五规划”。&lt;/p>
&lt;p>开源有时还会被赋予“可信、可控”的概念。诚然，开源并不能和“可信、可控”直接画上等号，只有当企业有能力并有资源来通过学习彻底吃透并掌握时才具备真正的可信、可控。但开源，确实通过源代码开放的形式，让用户可以吃上定心丸，并在企业必要的时候通过研究开源代码来解决运维中的问题。&lt;/p>
&lt;p>F5在中国运营开源NGINX，深刻理解中国用户的诉求。NGINX技术的可靠性与易开发性保证了企业能够具有更好更可靠的IT基础架构，这是它对企业数字化转型的重要意义。无论是在分布式还是在微服务架构里， NGINX技术都已经被全世界用户验证，其可靠性确保了IT基础架构的稳定。在中国，我们可以看到无论是互联网公司，还是金融企业，都有大量的用户在生产中使用NGINX技术，比如农业银行的开放银行，新网银行的业务访问调度等等。NGINX的易开发性让这些技术创新成为可能。可以说很多客户借助NGINX实现了软负载的自主可控。更进一步，通过对开源NGINX进行本地化，在中国提供开源订阅服务，意味着中国用户可以通过本地服务实现更可靠的产品使用，这个服务包含了基本的技术支持，还包含高级专家服务，联合共创、开发等。&lt;/p>
&lt;h3 id="开源的商业模式">开源的商业模式&lt;/h3>
&lt;p>开源的商业模式有很多。根据项目的起源、背景、诉求、主体的不同，一般可以分为：
广告模式，通过在网站、安装过程、文档等地方放入赞助商广告获得一定收益。游戏、搜索类项目，一般容易采取此类方式。&lt;/p>
&lt;p>&lt;strong>售卖服务&lt;/strong>，这是比较典型的开源商业模式。服务商本身并不提供代码的售卖，而是出售服务，用户为更好更专业的技术支持服务付费。服务的售卖可以是开源项目的原主体，也可能是其他主体。当然一般来说单纯售卖服务很难支撑一个公司的发展，一般来说企业会采取混合的商业模式，例如Redhat公司。&lt;/p>
&lt;p>&lt;strong>软件再分发&lt;/strong>，企业通过自身的开发，扩展、丰富上游开源项目，并形成商业化的产品进行再分发与销售。这是一种比较常见的方法，例如围绕kubernetes存在大量的商业发行或企业产品的再整合。&lt;/p>
&lt;p>&lt;strong>直接代码售卖&lt;/strong>，开源的定义容许你直接销售源码。在互联网早期，通过收集、分发代码或二进制软件并灌制为光盘等形式来获取收益。依靠直接销售代码在如今显然不太容易成功。&lt;/p>
&lt;p>&lt;strong>双重许可/核心开放&lt;/strong>，开源项目的主体在公开源代码的同时拥有商业License版本的软件，一般来说两者会存在一些功能性差异。开源产品会拥有主要的核心功能，但是一些对企业生产级部署时需要的额外功能会通过商业版本进行销售。这类企业往往也会同时附加售卖服务。NGINX开源与NGINX Plus便是一种双重许可。NGINX Plus完全基于开源OSS，但增加了诸多企业级的特性，使得用户可以更好的在生产环境下部署运行。&lt;/p>
&lt;p>&lt;strong>SaaS&lt;/strong>，将开源软件部署为云上的SaaS服务模型，也是当前比较流行的方式。也是云时代下，开源类产品更易获得商业成功的模式。MangoDB的SaaS服务即为这种模式。当然也因为云上服务引发了一些开源的争议，在后文的风险与挑战部分再做探讨。&lt;/p>
&lt;p>&lt;strong>生态伙伴&lt;/strong>，以生态伙伴的方式进行商业化属于一种混合的商业方式。一些企业通过员工全职参与到一些非常知名及流行的开源项目中，类如Istio，Kubernetes等。对这些上游项目进行贡献，并进入到这些上游项目的技术委员会，SIG等，在社区与领域上形成较高的影响力。公司本身则会进行相关专业服务支持、增值产品等的售卖。这是一种较为高级的商业形式，一般来说多存在于大型公司或极具创新的初创公司。如 Solo，Tetrate这类公司。F5 NGINX对社区k8s Ingress Controller的贡献也是这样的模式。&lt;/p>
&lt;p>开源的商业模式还有很多，例如捐助、众筹、周边品牌等。无论哪种方式，从用户角度来说，产品必须具备价值才能够被买单。对依赖开源进行商业化服务的公司来说，则必须提供有价值的产品、有良好体验的服务，回归到产品本源才能更容易实现开源商业化。仅依赖市场营难以持久实现开源商业化。&lt;/p>
&lt;h3 id="开源的风险与挑战">开源的风险与挑战&lt;/h3>
&lt;p>开源对企业或用户拥有诸多的好处。但在实际使用过程中，依然会存在一定的风险与挑战。&lt;strong>从风险角度来说&lt;/strong>，有以下四个方面：
&lt;strong>License风险&lt;/strong>，这可能是在使用开源中首要进行考虑的方面。一般来说自由软件License是copyleft模式的，这类License一般较为严格，会强制下游用户继续保持开源。因此要小心在修改代码后是否会违反License的要求，比如HAproxy的GPL License就要小心应对，这是典型的copyleft型许可，在分发修改并编译的二进制时，必须要附上修改后的源码，利用HAproxy实现的具有交付式能力的封装产品，在交付提示符下还需要有相关简短版权声明等。尽管如今的一些开源软件License已不再要求用户必须再开源修改后的代码，但是仍然需要小心License的许可场景以及限制性要求。比如，是否将开源代码用在了被禁止的使用场景里，Redis的RSAL就对使用的场景如搜索引擎、流处理引擎等进行了限制。在使用开源软件构建云上服务能力时，对于使用Affero GPL或SSPL协议的开源产品则必须小心，他要求必须公开相关源码，这对很多类似公有云的企业非常不友好，因此Google在内部严格拒绝在公有云上使用AGPL的软件。&lt;/p>
&lt;p>&lt;strong>项目持续性风险&lt;/strong>，由于开源的主体参差不齐，有些项目是一些企业KPI导向的结果，有些则是个人基于兴趣爱好或者工作阶段的成果(可以称之为：顺手开源)。这些项目可能无法具有持久性，其生命周期也较短。如果企业选择了这类项目，则必须要充分理解此类风险，企业需要自己能够持续性开发和维护。持续性风险，还可能表现在一些地缘问题上。尽管开源倡议组织（OSI）在开源的10项定义里提到“不歧视个人或群体”，但是在一定的情况下依然会遇到这样的担忧。有时候这类担忧是因为个人情感或基于个人认知而做出的。如前段时间F5关于停止F5俄罗斯办公室职员工作的声明，让少部分人从情感上无法接受，误解为NGINX源自俄罗斯而F5却停止了俄罗斯人对NGINX的贡献。实际上这仅仅是F5基于地域战争对F5内部职员安全考虑而做出的决定。NGINX的源代码一直托管在github以及mercurial多个服务系统上，来自全世界互联网用户的贡献、访问、下载均未被影响。&lt;/p>
&lt;p>&lt;strong>项目质量风险&lt;/strong>，开源项目由于追求开放性，以及开发者经验水平并不完全一致，这可能导致代码测试不充分、代码存在安全隐患，以及不全面的使用用例等。一些大型、热门的开源项目往往会通过规范开发者贡献、设置专门测试人员、文档人员、安全小组等方式来提升软件质量。但并不是所有项目都能具有这样的资源和能力。企业在做开源项目引入时候应做充分的调研与测试。&lt;/p>
&lt;p>&lt;strong>开源嵌套风险&lt;/strong>，此类风险需从两个角度考虑。一是License，当在自身的项目中引用其它开源项目时候要注意引用方法与License的关系，注意自身项目License与引用项目License是否存在兼容风险。二是注意连环嵌套带来的质量失控，当A项目引用B，B又引用C等这类多层引用时，要综合判断上述提到的所有风险情况。&lt;/p>
&lt;p>&lt;strong>从挑战角度来说&lt;/strong>，其涵盖要宽广的多。一般来说，企业的数字化转型会涉及文化、技术、流程这三个方面。同样的，企业使用开源的挑战也可以从这三个方面来思考。
文化方面，企业建立开源文化动力不足是个挑战。企业往往会强调运行的稳定，无论是流程还是KPI考核对于IT系统往往追求的是稳定性。从项目的招标、测试、上线、运维无一不以稳定为第一。在这样的文化下，技术系统、人员思想容易僵化：近乎静态稳定的IT系统限制了IT系统对业务创新的支持，导致业务上线速度缓慢；技术人员则会依赖商业产品的技术支持，导致缺乏创新精神。开源文化动力不足，还表现在另一方面，就是企业缺乏开源贡献精神，只是一味索取使用，不对开源上游进行贡献，更害怕把自己的创新共享到社区。&lt;/p>
&lt;p>&lt;strong>技术方面&lt;/strong>，涉及两个相互关联的挑战：开源技术掌握的能力，以及掌握技术的人才。开源产品，往往不是开箱即用，需要企业根据自身情况进行再开发，同时为了实现业务能力，往往还需要采用多种开源技术。这就需要企业需要具有更多的开发人才，更多的具有创新能力的人才，需要这些才来分析研究这些开源产品，吃透并掌握核心技术。这对于采用外包模式的企业，往往挑战很大，这类企业缺少足够的人才来掌握这些技术。即便是对于具有一定开发规模的企业来说，如何转型人才，建立良好的人才上升通道，留住掌握关键开源技术、吃透开源技术的高端人才，其实也是非常大的挑战。&lt;/p>
&lt;p>&lt;strong>流程方面&lt;/strong>，企业需要将已有流程与开源相适应，这往往比较困难。使用开源技术意味着面向闭源软件的流程需要改造并适应开源技术带来的变化，无论是商务流程、资产管理、技术配套、治理流程等等。我们见到有一些企业，当使用开源后，如何购买与开源相关的技术支持服务时，在流程上仍会遇到一些问题。&lt;/p>
&lt;h3 id="开源的选择与治理">开源的选择与治理&lt;/h3>
&lt;p>开源主体和开源用户对开源的选择与治理的思考会在两个不同的范畴。因为这是两个方向的问题，尽管两者角色有时候会交叉。&lt;/p>
&lt;p>&lt;strong>开源选择，对于开源主体&lt;/strong>来说，首先要对自己的项目是否开源做出决定。项目的负责人或公司需要基于对开源的认知理解，结合所在行业的特点、领域竞争分析，自身实际情况去思考，综合分析开源或不开源将会产生的影响。当决定开源后，还需决定是企业内部开源还是对外开源。企业内部开源是一些头部互联网或技术领先的大型企业的一种做法，其本质是利用开源的好处促进企业内部创新，打破企业部门壁垒，提高企业生产力和协作效率。一般来说，企业的内部开源会经历个人或小组自发阶段，进而到企业设立内部开源管理部门进行企业全局层面的统一开源管理与协调阶段。&lt;/p>
&lt;p>当正式决定开源后，随后就需转入对开源治理的思考。对开源主体来说，开源治理包含了两个方面，一是项目工程的治理，二是社区治理。&lt;/p>
&lt;p>（1）项目工程治理，无论如何，开源项目最终还是一个软件工程，只是它是建立在更大范围内的协作、信任与贡献的基础上。因此对于项目工程质量、代码方面的管理一样适用于开源项目。需要考虑项目的范围管理、进度管理、质量管理、变更控制等，通过这些管理保证代码的质量、进度、安全等。我们可以看到一些开源项目会给出开发者指导、Code of conduct等，这些都是用来保证代码质量。同时，还需要构建良好的DevOps自动化流水线，以便让开发者的贡献过程更加顺畅，确保提交的代码经过相关review、自动化检查、自动化测试等并及时反馈结果给贡献者。此外，还需要做好风险管理，我们可以看到很多成熟的开源项目都会要求开发者签订开发者贡献协议（CLA）之后才可以提交PR，这些都是为了防范版权、非原创等方面的风险。风险管理还包含对项目中所用到的其它开源组件的License合规性管理，避免引入风险，类似FOSSA类工具往往会被用于此方面的管理。&lt;/p>
&lt;p>（2）项目社区治理，开源项目最大的特点是去中心化，人员多样化，他们来自世界各地，背景不同、文化不同。因此社区的治理本质上是对“干系人”的管理，人的管理是开源项目中最大的挑战。可以说社区治理的好不好是项目能否成功的一个非常关键的因素，因而Apache基金会特别强调“Community over code”理念。社区从一开始就应该定下明确的规则与基调，这样可确保社区始终聚拢那些具有相同认知的人。社区的治理会涉及到选择哪种治理模式，比如基金会托管还是自我管理。一般来说，加入基金会有利于项目的运作，因为这些专业的开源基金会可以帮助指导项目的运作，也可以帮助项目快速走向全球化，帮助构建项目生态，通过基金会的力量形成不同项目之间的交叉支持。当然，基金会还会运作很多活动，这些都可以帮助项目提高知名度，吸引更多开发者成为用户，并最终成为贡献者。自我管理则需要项目所有者或背后所属的组织具有较强的社区管理能力。比如NGINX就属于自我管理，F5公司通过专业的社区运营团队来治理社区。无论哪种治理方式，其核心都是要帮助项目走在正确的轨道和方向上，保证项目的可持续发展，解决项目进行过程中的各类干系人问题。社区治理需要进行的工作可包含产品布道、活动运营、开发者关系维护、Issues/PR管理，许可证管理，社区契约与规则管理、文档管理、生态构建、法律事务等。&lt;/p>
&lt;p>&lt;strong>开源选择，对开源用户来说&lt;/strong>，特别是对企业用户，开源选择的第一条就是应建立准入控制，企业可以考虑建立开源软件资产白名单，避免开发者随意引入开源软件或项目，同时对采购的服务商所提供的软件也要执行相关白名单检查。尽管这在一定程度上增大了成本，但是对于企业的安全风险控制确是非常必要的。企业应对开源项目进行充分的调研与分析，了解项目的状态、活跃度、背后的支撑力量、运作模式、用户基数、贡献者热度、License限制、技术路演、软件架构、代码质量等，并做好充分的引入前测试。还应客观引入开源项目，避免少部分人的技术情怀或倾向而导致引入“关系型开源项目”。&lt;/p>
&lt;p>再来看&lt;strong>开源治理&lt;/strong>，如同上文关于使用开源的挑战，企业可以从文化、技术、流程方面进行开源治理。&lt;/p>
&lt;p>（1）文化方面，企业应建立崇尚开源、敬畏开源的文化。在积极鼓励采用开源技术的同时，加强员工对开源的认知。如尊重版权，避免法律风险。认识开源并不等于免费，使用开源不等于取巧。认识开源并不意味着就可以自主可控。开源不等于定制化，任何有利于产品的修改与增强都应回馈到上游。企业应根据自身实际情况客观评价当前对开源的把控能力，不宜冒进。比如企业可能是需要一步一步塑造开源文化基因，这时企业更适宜采用有专业支持服务的开源软件使用模式，通过引入第三方或开源服务商的支持来帮助企业避免技术风险，实现务实的自主可控。以软负载类产品为例，企业可通过引入NGINX支持服务来尝试开源实践。对于刚进行开源实践转型的部门，如运维部门，可考虑采用商业产品+厂商开源扩展的解决方案，确保在风险可控的前提下，逐步进入开源运维。&lt;/p>
&lt;p>（2）技术方面，在开发环节建立良好的开发构建与测试平台以及安全测试平台，对相关开源代码展开代码扫描检查。识别相关库的依赖关系，发现代码本身以及关联依赖的潜在漏洞。通过开源License管理软件检查可能存在的License合规性问题以及交叉问题。在交付运行环节，使用额外的安全设备或策略对运行开源组件的环境进行安全加强，比如相关开源软件在历史上是否曾暴露过漏洞，其所依赖的组件是否暴露过漏洞，有针对性的进行加固。加强技术团队对开源技术的学习与技能提升，建立专业的开源技术组件支持团队等。&lt;/p>
&lt;p>（3）流程方面，企业可以考虑建立从引入、开发、交付、运维到退出的全流程机制来进行开源管理。从组织机制、管理制度等方面来形成开源软件引入规范、开发规范、部署规范、运维规范、退出管理等规范。引入规范可以结合上述提到的开源选择部分识别开源准入，建立准入条件，把好入口第一道关。开发规范则可以考虑定义开源软件代码的使用语言、范式、边界、修改流程、文档流程等。部署规范可围绕交付、依赖管理、安全加固、标准化环境等方面进行考虑。运维规范可考虑开源软件的运维工具、排错流程、最佳实践等方面。此外，企业还应形成闭环的管理体系，针对开源的使用与运行，建立识别与检查机制。例如识别已经在运行的开源软件及相关项目，并对其进行评价，针对发现的问题进行相关文化、流程、技术方面的修正，也要及时退出运行不佳的开源软件，确保对开源的治理始终处在有效的轨道上，避免开源的蔓延与失控。&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;p>可以看出，无论是开源主体，还是开源用户，围绕开源的理解、选择、风险、挑战、治理都是一个系统化的工程与能力。近些年，在国家大力推进开源的战略背景下，国内又提出了“可信开源”的理念，其主要目标依然是如何更好的发挥开源的作用，避免开源中可能遇到的风险。不管怎样，如果一个开源项目能够始终坚持初心，坚持以用户为中心，那么在很多方面可以消除用户在开源方面的担忧与风险。正如F5中国总经理张毅强在“2022 F5多云应用服务科技峰会”上所说：以用户需求为中心，围绕产品特性与社区平台构建开源生态。这是保证NGINX在中国可以走的更长远的核心，是F5为用户提供价值的核心，是用户信赖F5的核心。我想，这同样也适用于我们对其他开源的理解。&lt;/p></description></item><item><title>Analysis and Thinking of Enterprise Open Source</title><link>http://linjing.io/post/nginx-book-copy/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>http://linjing.io/post/nginx-book-copy/</guid><description>&lt;blockquote>
&lt;p>In recent years, the role of open source software in promoting the digital transformation of enterprises has become more and more obvious. The country has written the construction and improvement of the open source ecosystem into the &amp;ldquo;14th Five-Year Plan&amp;rdquo;. At the same time, topics such as open source governance and secure supply chain have become a hot topic in the industry. As open source users or as open source subjects, how should we understand open source, how to understand the community, and how to participate in open source better and more safely. This article will discuss with you the meaning of open source, business models, risks and challenges, choices and governance.&lt;/p>
&lt;/blockquote>
&lt;h3 id="what-open-source-means-for-business">What Open Source Means for Business&lt;/h3>
&lt;p>Let us first think about the meaning of open source and individuality from the perspective of an individual. We can summarize &amp;ldquo;selfishness and altruism&amp;rdquo; in one sentence. Using open source projects or products can help individuals quickly solve problems and challenges at work, and individuals can also gain innovative ideas and experience from open source projects or products. These are all selfish. When an individual is not satisfied with just being an open source user, and begins to participate in the contribution of an open source project, or even set up an open source project himself, it becomes altruistic, and other users will benefit from his contribution or project.&lt;/p>
&lt;p>The same goes for businesses. When enterprises focus on their own digital transformation, it means that enterprises will pursue a more open organizational spirit. The core of digital transformation is to use digital technology and capabilities to reengineer enterprise processes, thereby driving business model innovation, enhancing enterprise competitiveness, and even changing an industry, just like &amp;ldquo;DiDi&amp;rdquo;. This requires the enterprise&amp;rsquo;s IT infrastructure and technology to not only support the rapid changes and development of the business, but also drive business innovation. Enterprises must quickly establish business, quickly iterate business, and quickly obtain business feedback. Therefore, having an IT architecture and technology that can flexibly support short-term and long-term business development is the key. Enterprises must adopt open and collaborative new technologies to continuously improve and enhance the iterative capability of technical architecture. These all mean being &amp;ldquo;fast&amp;rdquo; enough and &amp;ldquo;innovative&amp;rdquo; enough. Open source technology just responds to the needs of enterprises, because open source technology pursues the spirit of openness, collaboration and contribution. Enterprises adopting open source technology can obtain contributions from outstanding talents from all over the world, and can rapidly improve and enhance the competitiveness of enterprises through the contributions of talents from all over the world. The open ecosystem created by open source brings this value to all parties involved.&lt;/p>
&lt;p>Take the smart car industry as an example. Traditionally, car manufacturers have relied on a large number of third-party suppliers and technologies. However, when companies enter the new smart car track, car companies need to continuously innovate vehicle functions, improve user experience, and quickly occupy the market. If car companies still adopt the traditional supplier model, they will be constrained by those closed suppliers and will not be able to innovate products and quickly occupy the market. By adopting open source technologies, such as AGL (Automotive Grade Linux), it is possible to eliminate the need to develop the basic operating system of the vehicle, and instead invest valuable R&amp;amp;D technology on more competitive innovations.&lt;/p>
&lt;p>Enterprises with an open spirit will not only stop at adopting open source technologies, but will also contribute to open source. Large enterprises can help enterprises realize market strategies, occupy the market or change the game rules of the market by open-sourcing their own products or technologies, such as Google&amp;rsquo;s Android system. Innovative small enterprises can accumulate huge community users, increase their influence, and expand their own valuations through open source.&lt;/p>
&lt;p>It can be seen that the significance of open source to the digital transformation of enterprises is obvious. On the one hand, open source is conducive to stimulating technological innovation of enterprises. Compared with the use of closed source software, open source technology makes users more creative and innovative; on the other hand, the use of open source technology can help enterprises save costs, so that more IT investments are used to deploy new technologies and accelerate digital transformation. This finding is echoed in a survey of global IT leaders on the state of open source in the enterprise 2020, with 95% of respondents saying open source is strategically important to their overall software strategy. In China, some leading Internet companies have also established special corporate open source committees to help companies achieve better open source strategies. The country has written the construction and improvement of the open source ecosystem into the &amp;ldquo;14th Five-Year Plan&amp;rdquo;.&lt;/p>
&lt;p>Open source is sometimes given the concept of &amp;ldquo;trusted and controllable&amp;rdquo;. It is true that open source cannot be directly equated with &amp;ldquo;trustworthy and controllable&amp;rdquo;. Only when an enterprise has the ability and resources to thoroughly understand and master it through learning can it be truly trusted and controllable. However, open source, in the form of open source code, allows users to be reassured and solve problems in operation and maintenance by studying open source code when necessary.&lt;/p>
&lt;p>F5 operates open source NGINX in China and deeply understands the demands of Chinese users. The reliability and ease of development of NGINX technology ensure that enterprises can have a better and more reliable IT infrastructure, which is of great significance to the digital transformation of enterprises. Whether in distributed or microservice architecture, NGINX technology has been proven by users all over the world, and its reliability ensures the stability of IT infrastructure. In China, we can see that a large number of users use NGINX technology in production, whether it is an Internet company or a financial enterprise, such as the open banking of Agricultural Bank, the business access scheduling of Xinwang Bank, and so on. The ease of development of NGINX makes these technological innovations possible. It can be said that many customers have realized the autonomous control of soft loads with the help of NGINX. Further, by localizing open source NGINX and providing open source subscription services in China, it means that Chinese users can achieve more reliable product use through local services. This service includes basic technical support and advanced expert services. Creation, development, etc.&lt;/p>
&lt;h3 id="open-source-business-model">Open source business model&lt;/h3>
&lt;p>There are many business models for open source. According to the origin, background, appeal, and subject of the project, it can generally be divided into:
advertising mode, which can obtain certain benefits by placing sponsored advertisements on the website, installation process, documents, etc. Games and search projects are generally easy to take this approach.&lt;/p>
&lt;p>&lt;strong>Selling services&lt;/strong> is a typical open source business model. The service provider itself does not provide code sales, but services, and users pay for better and more professional technical support services. The sale of services can be the original subject of the open source project or other subjects. Of course, it is generally difficult to support the development of a company by simply selling services. Generally speaking, companies will adopt a mixed business model, such as Redhat.&lt;/p>
&lt;p>&lt;strong>Software redistribution&lt;/strong> , enterprises expand and enrich upstream open source projects through their own development, and form commercial products for redistribution and sales. This is a relatively common approach, such as there is a large number of commercial distributions or reintegration of enterprise products around kubernetes.&lt;/p>
&lt;p>&lt;strong>Direct code sale&lt;/strong> , the definition of open source allows you to sell source code directly. In the early days of the Internet, revenue was made by collecting, distributing code or binary software and making it on CD-ROM. Relying on direct sales codes is obviously not easy to succeed today.&lt;/p>
&lt;p>&lt;strong>Dual license/open core&lt;/strong> , the main body of the open source project has a commercial license version of the software while publishing the source code. Generally speaking, there will be some functional differences between the two. Open source products will have the main core functionality, but some additional functionality needed for production-level enterprise deployments will be sold in commercial versions. Such companies often also sell additional services at the same time. NGINX Open Source and NGINX Plus are a dual license. NGINX Plus is completely based on open source OSS, but has added many enterprise-level features, so that users can better deploy and run in the production environment.&lt;/p>
&lt;p>&lt;strong>SaaS&lt;/strong> , deploying open source software as a SaaS service model on the cloud, is also a popular way at present. It is also a model in which open source products are more likely to achieve commercial success in the cloud era. MongoDB&amp;rsquo;s SaaS service is this model. Of course, some open source controversies have arisen because of cloud services, which will be discussed later in the Risks and Challenges section.&lt;/p>
&lt;p>&lt;strong>Eco-partnership&lt;/strong> , commercialization in the form of an eco-partner is a hybrid business approach. Some companies have full-time employees involved in some very well-known and popular open source projects, such as Istio, Kubernetes, etc. Contribute to these upstream projects and enter the technical committees, SIGs, etc. of these upstream projects, forming a high influence in the community and field. The company itself will sell related professional service support, value-added products, etc. This is a more advanced form of business, generally found in large companies or very innovative start-ups. Companies such as Solo and Tetrate. F5 NGINX&amp;rsquo;s contribution to the community k8s Ingress Controller is also in this pattern.&lt;/p>
&lt;p>There are many open source business models, such as donations, crowdfunding, and peripheral brands. Either way, from the user&amp;rsquo;s perspective, the product must have value in order to be paid for. For companies that rely on open source for commercial services, they must provide valuable products and services with good experience, and return to the origin of the product to achieve open source commercialization more easily. It is difficult to achieve sustainable open source commercialization only by relying on the market.&lt;/p>
&lt;h3 id="open-source-risks-and-challenges">Open Source Risks and Challenges&lt;/h3>
&lt;p>Open source has many benefits for businesses or users. However, in the actual use process, there will still be certain risks and challenges. &lt;strong>From the risk point of view&lt;/strong> , there are the following four aspects:
&lt;strong>License risk&lt;/strong> , which may be the first consideration in the use of open source. Generally speaking, free software licenses are in copyleft mode. Such licenses are generally stricter and will force downstream users to keep open source. Therefore, be careful whether you will violate the license requirements after modifying the code. For example, the GPL License of HAproxy should be handled carefully. This is a typical copyleft license. When distributing the modified and compiled binary, you must attach the modified source code. Packaged products with delivery capabilities implemented using HAproxy also need a short copyright statement at the delivery prompt. Although some open source software licenses today no longer require users to open source the modified code, it is still necessary to be careful about the license scenarios and restrictive requirements. For example, whether open source code is used in prohibited usage scenarios, Redis&amp;rsquo;s RSAL restricts usage scenarios such as search engines and stream processing engines. When using open source software to build cloud service capabilities, you must be careful about open source products using the Affero GPL or SSPL protocol. He requires the relevant source code to be disclosed, which is very unfriendly to many companies similar to public clouds, so Google strictly refuses it internally. Use AGPL&amp;rsquo;s software on the public cloud.&lt;/p>
&lt;p>&lt;strong>Project continuity risk&lt;/strong> , due to the uneven main body of open source, some projects are the results of some enterprise KPI-oriented, and some are the results of individuals based on hobbies or work stages (it can be called: open source smoothly). These items may not be durable and have a short life cycle. If an enterprise chooses such a project, it must fully understand such risks, and the enterprise needs to be able to develop and maintain it continuously. Persistent risks may also be manifested in some geopolitical issues. Although the Open Source Initiative (OSI) mentions &amp;ldquo;non-discrimination against individuals or groups&amp;rdquo; in its 10 definitions of open source, such concerns may still be encountered under certain circumstances. Sometimes these concerns are based on personal emotions or based on personal perception. For example, some time ago, F5&amp;rsquo;s statement on stopping the work of F5&amp;rsquo;s Russian office staff made it emotionally unacceptable to a small number of people, misunderstanding that NGINX originated in Russia, but F5 stopped Russians&amp;rsquo; contributions to NGINX. In fact, this is just a decision made by F5 based on the regional war for the safety of F5&amp;rsquo;s internal staff. The source code of NGINX has been hosted on github and mercurial multiple service systems, and contributions, access, and downloads from Internet users around the world have not been affected.&lt;/p>
&lt;p>&lt;strong>Project quality risk&lt;/strong> , open source projects pursue openness, and developers&amp;rsquo; experience levels are not completely consistent, which may lead to insufficient code testing, code security risks, and incomplete use cases. Some large and popular open source projects often improve software quality by standardizing developer contributions, setting up special testers, documentation personnel, and security teams. But not all projects have such resources and capabilities. Enterprises should do sufficient research and testing when introducing open source projects.&lt;/p>
&lt;p>&lt;strong>Open source nesting risks&lt;/strong> , such risks need to be considered from two perspectives. One is the license. When citing other open source projects in your own project, you should pay attention to the relationship between the reference method and the license, and pay attention to whether there is a compatibility risk between the license of your own project and the license of the referenced project. The second is to pay attention to the loss of quality control caused by serial nesting. When project A cites B, and B cites C and other multi-level references, it is necessary to comprehensively judge all the above-mentioned risks.&lt;/p>
&lt;p>&lt;strong>From a challenge perspective&lt;/strong> , its coverage is much broader. Generally speaking, the digital transformation of enterprises involves three aspects: culture, technology and process. Likewise, the challenges of enterprise use of open source can also be considered from these three perspectives.
Culturally, the lack of motivation for companies to build an open source culture is a challenge. Enterprises often emphasize the stability of operation. Whether it is a process or KPI assessment, stability is often pursued for IT systems. From the bidding, testing, launching, and operation and maintenance of the project, stability is the first. In such a culture, the technical system and personnel ideas tend to become rigid: the almost static and stable IT system limits the IT system’s support for business innovation, resulting in slow business launch; technical personnel will rely on the technical support of commercial products, resulting in a lack of innovation Spirit. On the other hand, the lack of motivation for open source culture is that enterprises lack the spirit of open source contribution. They only ask for use, do not contribute to the upstream of open source, and are even more afraid to share their innovations with the community.&lt;/p>
&lt;p>&lt;strong>On the technical side&lt;/strong> , there are two interrelated challenges: the ability to master open source technology, and the talent to master the technology. Open source products are often not ready to use out of the box. Enterprises need to re-develop according to their own conditions. At the same time, in order to achieve business capabilities, they often need to adopt a variety of open source technologies. This requires enterprises to have more development talents and more innovative talents, who need these talents to analyze and study these open source products, understand and master core technologies. This is often a big challenge for companies that adopt outsourcing models, and such companies lack enough talents to master these technologies. Even for enterprises with a certain development scale, how to transform talents, establish a good talent promotion channel, and retain high-end talents who master key open source technologies and understand open source technologies are actually very big challenges.&lt;/p>
&lt;p>&lt;strong>In terms of processes&lt;/strong> , companies need to adapt existing processes to open source, which is often difficult. Using open source technology means that processes oriented towards closed source software need to be transformed and adapted to the changes brought about by open source technology, whether it is business processes, asset management, technical support, governance processes, etc. We have seen that some enterprises still encounter some problems in the process of purchasing open source-related technical support services after using open source.&lt;/p>
&lt;h3 id="open-source-selection-and-governance">Open Source Selection and Governance&lt;/h3>
&lt;p>Open source subjects and open source users think about open source selection and governance in two different categories. Because it&amp;rsquo;s a question of two directions, even though the roles of the two sometimes intersect.&lt;/p>
&lt;p>&lt;strong>Open source choice, for open source subjects&lt;/strong> , the first thing to do is to make a decision on whether or not to open source their projects. The person in charge of the project or company needs to think about it based on the cognitive understanding of open source, combined with the characteristics of the industry, the analysis of competition in the field, and its own actual situation, and comprehensively analyze the impact of open source or not open source. When you decide to open source, you also need to decide whether to open source internally or externally. Intra-enterprise open source is a practice of some leading Internet or technology-leading large enterprises. Generally speaking, the internal open source of an enterprise will go through the spontaneous stage of individuals or groups, and then to the stage of unified open source management and coordination at the global level of the enterprise by setting up an internal open source management department in the enterprise.&lt;/p>
&lt;p>When the official decision to open source is made, then it is necessary to turn to thinking about open source governance. For open source entities, open source governance includes two aspects, one is the governance of project engineering, and the other is community governance.&lt;/p>
&lt;p>(1) Project engineering governance. In any case, an open source project is ultimately a software engineering, but it is based on a larger scope of collaboration, trust and contribution. Therefore, the management of project engineering quality and code is also applicable to open source projects. It is necessary to consider the scope management, schedule management, quality management, change control, etc. of the project, and ensure the quality, progress, and safety of the code through these managements. We can see that some open source projects will give developer guidance, Code of conduct, etc., which are used to ensure code quality. At the same time, it is also necessary to build a good DevOps automation pipeline to make the contribution process of developers smoother, to ensure that the submitted code undergoes relevant reviews, automated inspections, automated tests, etc., and the results are fed back to contributors in a timely manner. In addition, risk management needs to be done well. We can see that many mature open source projects require developers to sign a Developer Contribution Agreement (CLA) before submitting PR. These are to prevent copyright, non-original and other risks. Risk management also includes license compliance management for other open source components used in the project to avoid introducing risks. Tools like FOSSA are often used for this management.&lt;/p>
&lt;p>(2) Project community governance. The biggest feature of open source projects is decentralization and diverse personnel. They come from all over the world, with different backgrounds and cultures. Therefore, the governance of the community is essentially the management of &amp;ldquo;stakeholders&amp;rdquo;, and the management of people is the biggest challenge in open source projects. It can be said that the quality of community governance is a very critical factor for the success of the project, so the Apache Foundation particularly emphasizes the concept of &amp;ldquo;Community over code&amp;rdquo;. A community should have clear rules and a tone from the start, which ensures that the community always brings together those who share the same understanding. The governance of the community will involve choosing which governance model, such as foundation custody or self-management. Generally speaking, joining the foundation is beneficial to the operation of the project, because these professional open source foundations can help guide the operation of the project, and can also help the project go global quickly, help build the project ecology, and form a relationship between different projects through the power of the foundation. cross support. Of course, the foundation also runs many activities, which can help the project to increase its visibility, attract more developers to become users, and eventually become contributors. Self-management requires the project owner or the organization behind it to have strong community management capabilities. For example, NGINX is self-managed, and F5 manages the community through a professional community operation team. No matter what kind of governance method, the core is to help the project walk on the right track and direction, ensure the sustainable development of the project, and solve various stakeholder problems in the process of the project. The work required for community governance can include product evangelism, event operation, developer relationship maintenance, Issues/PR management, license management, community contract and rule management, document management, ecological construction, legal affairs, etc.&lt;/p>
&lt;p>&lt;strong>Open source selection. For open source users&lt;/strong> , especially for enterprise users, the first rule of open source selection is to establish access control. Enterprises can consider establishing a whitelist of open source software assets to prevent developers from randomly introducing open source software or projects. The software provided by the purchased service provider is also subject to relevant whitelist checks. Although this increases the cost to a certain extent, it is indeed very necessary for the enterprise&amp;rsquo;s security risk control. Enterprises should conduct sufficient research and analysis on open source projects to understand the status, activity, supporting force behind the project, operation mode, user base, contributor popularity, license restrictions, technical roadshows, software architecture, code quality, etc., and do a good job Adequate pre-introduction testing. Open source projects should also be introduced objectively to avoid the introduction of &amp;ldquo;relational open source projects&amp;rdquo; due to the technical feelings or inclinations of a small number of people.&lt;/p>
&lt;p>Let&amp;rsquo;s look at &lt;strong>open source governance&lt;/strong> . As with the challenges of using open source above, enterprises can conduct open source governance in terms of culture, technology, and process.&lt;/p>
&lt;p>(1) In terms of culture, enterprises should establish a culture of advocating and respecting open source. While actively encouraging the adoption of open source technologies, strengthen employee awareness of open source. Such as respecting copyright and avoiding legal risks. Knowing open source does not mean free, and using open source does not mean cheating. Knowing open source doesn&amp;rsquo;t mean you can be autonomous and controllable. Open source does not mean customization, and any modifications and enhancements that are beneficial to the product should be fed back to the upstream. Enterprises should objectively evaluate their current ability to control open source according to their own actual situation, and should not rashly advance. For example, enterprises may need to shape open source cultural genes step by step. At this time, it is more suitable for enterprises to adopt open source software usage models with professional support services. By introducing the support of third parties or open source service providers to help enterprises avoid technical risks and achieve pragmatic independent availability control. Taking soft load products as an example, enterprises can try open source practices by introducing NGINX support services. For departments that have just undergone open source practice transformation, such as operation and maintenance departments, they can consider adopting commercial products + manufacturers&amp;rsquo; open source expansion solutions to ensure that they gradually enter open source operation and maintenance under the premise of controllable risks.&lt;/p>
&lt;p>(2) In terms of technology, establish a good development construction and testing platform and security testing platform in the development link, and conduct code scanning and inspection on relevant open source codes. Identify dependencies of related libraries and discover potential vulnerabilities in the code itself and associated dependencies. Check for possible license compliance issues and cross-problems through open source license management software. During delivery and operation, use additional security devices or strategies to strengthen the environment in which open source components run reinforcement. Strengthen the technical team&amp;rsquo;s learning and skill improvement of open source technology, and establish a professional open source technology component support team.&lt;/p>
&lt;p>(3) In terms of process, enterprises can consider establishing a whole process mechanism from introduction, development, delivery, operation and maintenance to exit for open source management. From the aspects of organizational mechanism and management system, the open source software introduction specification, development specification, deployment specification, operation and maintenance specification, exit management and other specifications are formed. The introduction of specifications can be combined with the above-mentioned open source selection part to identify open source access, establish access conditions, and make the first pass of the entrance. The development specification can consider defining the use language, paradigm, boundary, modification process, documentation process, etc. of open source software code. Deployment specifications can be considered around delivery, dependency management, security hardening, and standardized environments. Operation and maintenance specifications can consider the operation and maintenance tools, troubleshooting processes, best practices and other aspects of open source software. In addition, enterprises should also form a closed-loop management system, and establish an identification and inspection mechanism for the use and operation of open source. For example, identify open source software and related projects that are already running, and evaluate them, make corrections in terms of culture, process, and technology for the problems found, and exit open source software that is not running well in time to ensure that the governance of open source is always Stay on track to avoid open source sprawl and runaway.&lt;/p>
&lt;h3 id="summarize">Summarize&lt;/h3>
&lt;p>It can be seen that, whether it is an open source subject or an open source user, the understanding, choice, risk, challenge, and governance of open source are all systematic projects and capabilities. In recent years, under the strategic background of the country&amp;rsquo;s vigorous promotion of open source, the concept of &amp;ldquo;trusted open source&amp;rdquo; has been proposed in China, and its main goal is still how to better play the role of open source and avoid possible risks in open source. In any case, if an open source project can always adhere to its original intention and insist on being user-centered, it can eliminate users&amp;rsquo; concerns and risks in open source in many aspects. As Zhang Yiqiang, general manager of F5 China, said at the &amp;ldquo;2022 F5 Multi-Cloud Application Service Technology Summit&amp;rdquo;: Focus on user needs and build an open source ecosystem around product features and community platforms. This is the core that ensures that NGINX can go a long way in China, the core that F5 provides value to users, and the core that users trust F5. I think the same applies to our understanding of other open source.&lt;/p></description></item><item><title>New NGINX book published!</title><link>http://linjing.io/post/nginx-book/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>http://linjing.io/post/nginx-book/</guid><description>&lt;h2 id="quick--introduction">Quick Introduction&lt;/h2>
&lt;p>Pls order it in jd.com, Chinese book name： NGINX经典教程&lt;/p>
&lt;p>&lt;img src="img/image-20220516125953377.png" alt="image-20220516125953377">&lt;/p>
&lt;p>&lt;img src="img/image-20220516130010458.png" alt="image-20220516130010458">&lt;/p>
&lt;p>&lt;img src="img/image-20220516130043488.png" alt="image-20220516130043488">&lt;/p>
&lt;p>&lt;img src="img/image-20220516124855457.png" alt="image-20220516124855457">&lt;/p></description></item><item><title>Project- Container Egress Service(CES)</title><link>http://linjing.io/post/f5-container-egress-service-ces/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>http://linjing.io/post/f5-container-egress-service-ces/</guid><description>&lt;h2 id="solution-architecture">Solution architecture&lt;/h2>
&lt;h3 id="components">Components&lt;/h3>
&lt;p>The CES solution includes the following components:&lt;/p>
&lt;ul>
&lt;li>CES controller: a container running in k8s. This component is the control plane, responsible for converting the outbound policies that deployed in k8s into the external data plane component(here is F5 AFM).&lt;/li>
&lt;li>F5 BIG-IP AFM: Data plane components running outside of k8s. Accept the configuration issued by the CES controller and execute specific access control rules, such as access control lists, bandwidth limiting, traffic programming, etc.&lt;/li>
&lt;li>CNI: CNI is a choice of the user environment itself and is not included in the CES plan. However, different CNIs will have different effects on the functions of the CES solution. Use &lt;a href="https://github.com/kubeovn/kube-ovn/">kube-ovn&lt;/a> CNI to get the full functionality of CES.&lt;/li>
&lt;/ul>
&lt;h3 id="architecture-diagram">Architecture diagram&lt;/h3>
&lt;p>&lt;img src="img/high-level-arch.jpg" alt="high-level-arch">&lt;/p>
&lt;h3 id="policy-scope-and-role">Policy scope and role&lt;/h3>
&lt;p>CES provides three policy scopes &lt;code>cluster global&lt;/code> &lt;code>namespace&lt;/code> and &lt;code>service&lt;/code>. Its meaning and user role relationship are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>scope&lt;/th>
&lt;th>meaning&lt;/th>
&lt;th>Adaptation role&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Cluster global&lt;/td>
&lt;td>It is the global level policy of the cluster, which is used to control the general and overall access control of the cluster. For example, the cluster&amp;rsquo;s access to basic public services such as NTP and DNS of the enterprise. The scope policy is applied to the outbound access control of all services in the cluster.&lt;/td>
&lt;td>Cluster administrator, Security team&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>namespace&lt;/td>
&lt;td>This policy level is effective for a single namespace or project. It is used to control the access of all services in specific NS or project to access the services out of the cluster. Policies in different namespaces or projects do not affect each other. *This function requires the support of CNI.&lt;/td>
&lt;td>Project team, application operation team&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>service level&lt;/td>
&lt;td>The policy control the k8s servcies to the external services. Only valid for specific services. So if the CNI can not support namespace level policy, set svc level policy is an alternative way.&lt;/td>
&lt;td>Project team, application operation, microservice owner&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tenant-isolation">Tenant isolation&lt;/h3>
&lt;p>The CES solution supports strong isolation of &lt;code>network + namespace&lt;/code>. Supports the administrative isolation of configuration objects on the data plane, and also supports strict traffic isolation at the network level. Support different namespaces to use overlapping CIDR.&lt;/p>
&lt;pre>&lt;code>Need CNI support network isolation. For example kube-ovn's per ns subnet
&lt;/code>&lt;/pre>&lt;h2 id="solution-value">Solution value&lt;/h2>
&lt;h3 id="challenges-solved">Challenges solved&lt;/h3>
&lt;ul>
&lt;li>High-frequency changes in outbound traffic caused by container IP dynamics&lt;/li>
&lt;li>Different role groups have different requirements for the scope setting of the policy, and the policy needs to match the role in multiple dimensions&lt;/li>
&lt;li>Dynamic bandwidth limit requirements for outbound traffic&lt;/li>
&lt;li>Protocol in-depth security inspection requirements&lt;/li>
&lt;li>Advanced requirements for flow programmable based on access control events&lt;/li>
&lt;li>Visualization requirements for outbound traffic&lt;/li>
&lt;/ul>
&lt;h3 id="provided-capabilities">Provided capabilities&lt;/h3>
&lt;ul>
&lt;li>Dynamic IP ACL control with Cluster/Pod/NS granularity&lt;/li>
&lt;li>Cluster/Pod/NS granular FQDN ACL control&lt;/li>
&lt;li>Time-based access control&lt;/li>
&lt;li>Matched flow event trigger and programmable&lt;/li>
&lt;li>Matched traffic redirection&lt;/li>
&lt;li>Protocol security and compliance testing&lt;/li>
&lt;li>IP intelligence&lt;/li>
&lt;li>Traffic matching log&lt;/li>
&lt;li>Traffic matching visualization report&lt;/li>
&lt;li>Protocol detection visual report&lt;/li>
&lt;li>TCP/IP Errors report&lt;/li>
&lt;li>NAT control and logging&lt;/li>
&lt;li>Data flow visualization tracking&lt;/li>
&lt;li>Visual simulation of access rules&lt;/li>
&lt;li>Transparent detection mode&lt;/li>
&lt;li>High-speed log outgoing&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>Partial functions will evolve along with version iterations
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Next step:&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/f5devcentral/container-egress-service/wiki/EN_2_CES_Installation">Understanding CES installation&lt;/a>&lt;/p></description></item></channel></rss>